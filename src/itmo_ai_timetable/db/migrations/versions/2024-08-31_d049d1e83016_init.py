"""init

Revision ID: d049d1e83016
Revises:
Create Date: 2024-08-31 01:35:02.518349

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op

from itmo_ai_timetable.schemes import ClassStatus

# revision identifiers, used by Alembic.
revision: str = "d049d1e83016"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "class_status",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "course",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("meeting_link", sa.String(), nullable=True),
        sa.Column("course_info_link", sa.String(), nullable=True),
        sa.Column("chat_link", sa.String(), nullable=True),
        sa.Column("timetable_id", sa.String(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user",
        sa.Column("user_real_name", sa.String(), nullable=True),
        sa.Column("user_tg_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "class",
        sa.Column("course_id", sa.Integer(), nullable=False),
        sa.Column("start_time", sa.DateTime(), nullable=False),
        sa.Column("end_time", sa.DateTime(), nullable=False),
        sa.Column("class_status_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["class_status_id"],
            ["class_status.id"],
        ),
        sa.ForeignKeyConstraint(
            ["course_id"],
            ["course.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_course",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("course_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["course_id"],
            ["course.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "course_id", "id"),
    )
    # ### end Alembic commands ###
    # use items from ClassStatus to fill class_status table
    class_status_table = sa.table("class_status", sa.column("id"), sa.column("name"))
    op.bulk_insert(class_status_table, [{"name": name.value} for name in ClassStatus])


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("user_course")
    op.drop_table("class")
    op.drop_table("user")
    op.drop_table("course")
    op.drop_table("class_status")
    # ### end Alembic commands ###
